#!/bin/sh
CACHE="$HOME/.cache/relchk"
mkdir -p "$CACHE"
CUR="$CACHE/releases"
PREV="$CUR.last"
IS_VALID="ðŸŸ¢"
NEED_UPDATE="ðŸŸ "
COMMIT="commit"
MOTD="motd"
UPDATE="update"

if [ -z "$1" ]; then
  echo "argument required"
  exit 1
fi

_diff() {
  diff -u "$CUR" "$PREV" 
}

case "$1" in
  "version")
    echo "v0.0.1"
    ;;
  "$UPDATE")
    ;;
  "$MOTD" | "$COMMIT" | "bar")
    [ ! -e "$CUR" ] && echo "no updates available" && exit 1
    if [ "$1" = "$MOTD" ]; then
      _diff | sed '1s/^/\nreleases\n---\n/'
    else 
      if [ "$1" = "bar" ]; then
        STATUS=$(_diff)
        if [ -z "$STATUS" ]; then
          echo "$IS_VALID"
        else
          echo "$NEED_UPDATE"
          echo "---"
          echo "$STATUS" | grep '^-[a-z]'
        fi
      else
        cp "$CUR" "$PREV"  
      fi
    fi
    exit 0
    ;;
    "completions")
      {
        cat << EOF
#compdef _relchk relchk

_relchk() {
  local curcontext="\$curcontext" state len
  typeset -A opt_args
  _arguments \
    '1: :->main'\
    '*: :->args'

  len=\${#words[@]}
  case \$state in
    main)
        _arguments "1:main:($COMMIT $MOTD $UPDATE)"
    ;;
    *)
  esac
}

compdef _relchk relchk
EOF
    }
    exit 0
    ;;
  *)
    echo "unknown command: $1"
    exit 1
    ;;
esac

[ ! -e "$PREV" ] && touch "$PREV"

NOW=$(date +%Y-%m-%d)
if [ -e "$CUR" ]; then
  MODTIME=$(stat -f "%Sm" -t "%Y-%m-%d" "$CUR")
  [ "$NOW" = "$MODTIME" ] && exit 0
fi
CURTMP="$CUR"
{
  grep -v '^ *#' "$HOME/.config/relchk/config" | while IFS= read -r CONFIG; do
    NAME=$(basename "$CONFIG")
    {
      if ! git -c http.lowSpeedTime=5 -c http.lowSpeedLimit=1000 ls-remote "$CONFIG"; then
        echo "failed on $NAME"
        exit 1
      fi
    } | sed 's/\t/ /g' | grep 'refs/tags/' | grep -v '{}' | cut -d ' ' -f 2 | cut -d '/' -f 3- | sed "s#^#$NAME -> #g"
  done
} > "$CURTMP"
mv "$CURTMP" "$CUR"
