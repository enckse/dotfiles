#!/bin/sh -e
PKGS_CACHE="$HOME/.cache/pkgversions"
mkdir -p "$PKGS_CACHE"
RUN="$PKGS_CACHE/run"
FORCE=0
RAN=0
UPDATE=0

while getopts "fcu" opt ; do
  case $opt in
    f)
      FORCE=1
      ;;
    u)
      UPDATE=1
      FORCE=1
      ;;
    c)
      {
      cat << EOF
# pkgversions completion

_pkgversions() {
  local cur
  cur=\${COMP_WORDS[COMP_CWORD]}
  if [ "\$COMP_CWORD" -eq 1 ]; then
    COMPREPLY=( \$(compgen -W "-f -u" -- "\$cur") )
  fi
}

complete -F _pkgversions -o bashdefault pkgversions
EOF
      }
      exit 0
      ;;
    *)
      echo "unknown arg $opt"
      exit 1
      ;;
  esac
done

if [ "$FORCE" -eq 0 ] && [ -e "$RUN" ]; then
  if [ "$(find "$RUN" -type f -mmin -60 | wc -l)" -gt 0 ]; then
    echo "recent update check completed..."
    exit 0
  fi
fi

_store() {
  name=$(echo "$1" | tr -cd "[:alnum:]._-")
  vers=$(echo "$2" | tr -cd "[:alnum:]._-")
  hashed="$(echo "$1 -> $2" | sha256sum | cut -c 1-7)"
  file="$PKGS_CACHE/$name.$vers.$hashed"
  if [ -e "$file" ]; then
    return
  fi
  echo "$1 -> $2"
  printf "  processed? (y/N) "
  read yesno
  case "$yesno" in
    "Y" | "y")
      echo "$1 $2" > "$file"
      return
      ;;
  esac
  RAN=1
}

_header() {
  echo "processing: $1" >&2
}

_version() {
  _header "$1"
  git-feed -url "$1"
}

go_version() {
  go_install "$2" "$3"
  [ "$UPDATE" -eq 1 ] && return
  check_version "$1"
}

go_install() {
  [ "$UPDATE" -eq 0 ] && return
  [ -z "$1" ] && [ -z "$2" ] && echo "$@ has no version information to install" && exit 1
  echo "go installing: $1"
  go install "$1@$2"
}

vim_plugin() {
  [ "$UPDATE" -eq 0 ] && return
  PACK="$HOME/.config/vim/pack/plugins/start"
  mkdir -p "$PACK"
  BASE=$(basename "$1")
  DIR="$PACK/$BASE"
  [ ! -d "$DIR" ] && echo "initializing vim plugin: $BASE" && git clone --quiet "$1" "$DIR"
  echo "updating vim plugin: $BASE"
  git -C "$DIR" pull --quiet 
}

completion() {
  [ "$UPDATE" -eq 0 ] && return
  [ -z "$1" ] && [ -z "$2" ] && echo "$@ lack completion information" && exit 1
  COMPS="$HOME/.local/share/completions"
  mkdir -p "$COMPS"
  "$1" "$2" > "$COMPS/$1.sh"
}

check_version() {
  [ "$UPDATE" -eq 1 ] && return
  FOUND=0
  BASE=$(basename "$1")
  for vers in $(_version "$1"); do
    FOUND=1
    _store "$BASE" "$vers"
  done
  if [ -z "$FILTER" ] && [ "$FOUND" -eq 0 ]; then
    echo "no versions found"
    exit 1
  fi
}

source "$HOME/.config/dotfiles/packages"
[ "$UPDATE" -eq 0 ] && [ "$RAN" -eq 0 ] && touch "$RUN"
