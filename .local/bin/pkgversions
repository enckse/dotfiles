#!/bin/sh -e
PKGS_CACHE="$HOME/.cache/pkgversions"
RUN="$PKGS_CACHE/run"
FORCE=0
RAN=0
VERS=0.0.2

while getopts "fcuv" opt ; do
  case $opt in
    v)
      echo "$VERS"
      exit 0
      ;;
    f)
      FORCE=1
      ;;
    c)
      {
        USE_SHELL=$(basename "$SHELL")
        [ "$USE_SHELL" = "zsh" ] && cat << EOF
#compdef _pkgversions pkgversions

_pkgversions() {
  local curcontext="\$curcontext" state len
  typeset -A opt_args
  _arguments \
    '1: :->main'\
    '*: :->args'

  len=\${#words[@]}
  case \$state in
    main)
        _arguments "1:main:(-f)"
    ;;
    *)
  esac
}

compdef _pkgversions pkgversions
EOF
       [ "$USE_SHELL" = "bash" ] && cat << EOF
# pkgversions completion

_pkgversions() {
  local cur
  cur=\${COMP_WORDS[COMP_CWORD]}
  if [ "\$COMP_CWORD" -eq 1 ]; then
    COMPREPLY=( \$(compgen -W "-f" -- "\$cur") )
  fi
}

complete -F _pkgversions -o bashdefault pkgversions
EOF
      }
      exit 0
      ;;
    *)
      echo "unknown arg $opt"
      exit 1
      ;;
  esac
done

mkdir -p "$PKGS_CACHE"

if [ "$FORCE" -eq 0 ] && [ -e "$RUN" ]; then
  if [ "$(find "$RUN" -type f -mmin -60 | wc -l)" -gt 0 ]; then
    echo "recent update check completed..."
    exit 0
  fi
fi

_header() {
  echo "processing: $1" >&2
}

_version() {
  _header "$1"
  git -c http.lowSpeedTime=5 -c http.lowSpeedLimit=1000 ls-remote "$1" | tr '\t' ' ' | cut -d ' ' -f 2 | grep "refs/tags" | sed 's#refs/tags/##g' | grep -v '{}$'
}

check_version() {
  BASE="$PKGS_CACHE/"$(echo "$1" | tr -cd "[:alnum:]._-" | sed 's/^https//g')
  _version "$1" | sort -u > "$BASE"
  [ ! -s "$BASE" ] && echo "no versions, upstream error" && exit 1
  PREV="$BASE.prev"
  touch "$PREV"
  if diff -u "$PREV" "$BASE"; then
    return
  fi
  printf "  processed? (y/N) "
  read yesno
  case "$yesno" in
    "Y" | "y")
      mv "$BASE" "$PREV"
      return
      ;;
  esac
  RAN=1
}

. "$HOME/.config/dotfiles/packages"
[ "$RAN" -eq 0 ] && touch "$RUN"
find "$PKGS_CACHE" -type f -mtime +30 -delete
