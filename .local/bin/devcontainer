#!/bin/sh -e

! command -v container > /dev/null && echo "no container tool" && exit 1

VERS="0.0.5"
REBUILD=0
IS_REBUILD="rebuild"
IS_CLEAN="clean"
CALLSIGN="devcontainer."
CLEAN=0
CLEAN_CMD=0
if [ -n "$1" ]; then
  case "$1" in
    "version")
      echo "$VERS"
      exit 0
      ;;
    "$IS_CLEAN")
      CLEAN_CMD=1
      CLEAN=1
      ;;
    "$IS_REBUILD")
      REBUILD=1
      CLEAN=1
      ;;
    "completions")
      {
        cat << EOF
#compdef _devcontainer devcontainer

_devcontainer() {
  local curcontext="\$curcontext" state len args
  typeset -A opt_args
  _arguments \\
    '1: :->main'\\
    '*: :->args'

  len=\${#words[@]}
  case \$state in
    main)
        _arguments "1:main:($IS_REBUILD $IS_CLEAN)"
    ;;
    *)
  esac
}

compdef _devcontainer devcontainer
EOF
      }
      exit 0
      ;;
    *)
      echo "unknown argument: $1"
      exit 1
      ;;
  esac
fi

LIB="$HOME/.config/devcontainer"
ENV="$LIB/env.sh"
[ ! -e "$ENV" ] && echo "no env file?" && exit 1
. "$ENV"
[ -z "$USER_SHELL" ] && echo "no user shell set" && exit 1
[ -z "$USER_HOME" ] && echo "no user home set" && exit 1
CONTAINERFILE="$LIB/Containerfile"
FS="$HOME/.devcontainer"
BUILD_CACHE="$FS/build"
HASH=$(sha256sum "$CONTAINERFILE" | cut -c 1-7)
NAME="$CALLSIGN$HASH.$(date +%Y%U)"
MOUNTS=""
MOUNTS="--mount type=bind,source=$FS/home,target=$USER_HOME/"
MOUNTS="$MOUNTS --mount type=bind,source=$FS/apks,target=/etc/apk/cache"
MOUNTS="$MOUNTS --mount type=bind,source=$HOME/.local,target=$USER_HOME/.host"
CWD="$USER_HOME"
for DIR in $USER_MOUNTS; do
  MOUNTS="$MOUNTS --mount type=bind,source=$HOME/$DIR,target=$USER_HOME/$DIR"
  if echo "$PWD" | grep -q "$HOME/$DIR"; then
    CWD="$(echo "$PWD" | sed "s#$HOME#$USER_HOME#g")"
  fi
done

_containermgr() {
  LIST_ARGS="--all"
  IS_IMAGES=""
  if [ "$1" = "images" ]; then
    LIST_ARGS=""
    IS_IMAGES="images"
  fi
  container $IS_IMAGES list $LIST_ARGS | grep "$CALLSIGN" | cut -d " " -f 1 | xargs container $IS_IMAGES $2 >/dev/null
}

_end() {
  echo "managing containers"
  _containermgr containers stop
  _containermgr containers rm
  _containermgr images delete
  container images prune
}

_rmcache() {
  rm -f "$BUILD_CACHE"
}

if [ -e "$BUILD_CACHE" ]; then
  echo "waiting on build"
  while [ -e "$BUILD_CACHE" ]; do
    printf "."
    sleep 1
  done
fi

container system start
if ! container images ls | grep -q "$NAME"; then
  REBUILD=1
fi

if [ "$CLEAN" -eq 1 ]; then
  _end
  [ "$CLEAN_CMD" -eq 1 ] && exit 0
fi

if [ "$REBUILD" -eq 1 ]; then
  touch "$BUILD_CACHE"
  trap _rmcache EXIT INT TERM
  echo "building container ($NAME)"
  container build \
	  --build-arg USER_SHELL="$USER_SHELL" \
	  --build-arg USER="$USER" \
	  -f "$CONTAINERFILE" \
	  -t "$NAME"
  _rmcache
fi

echo
exec container \
    run \
    -it \
    --rm \
    --cwd "$CWD" \
    --user $USER \
    --env IS_CONTAINER="$(echo "$NAME" | cut -d "." -f 1)" \
    --env USER="$USER" \
    --env SHELL="$USER_SHELL" \
    ${MOUNTS} \
    "$NAME" \
    "$USER_SHELL"
