#!/bin/sh
GITDIRTY=""
GITCLEAN=""

_gitcmd() {
  HEADER=$(echo "$2" | cut -d " " -f 1)
  RESULT=$(/usr/bin/git -C "$1" ${2})
  if [ "$HEADER" = "branch" ]; then
    RESULT=$(echo "$RESULT" | grep -E -v '(master|main)')
  fi
  if [ -z "$RESULT" ]; then
    return
  fi
  echo " ($HEADER)"
}

_gitstatus() {
  BASE=$(echo "$1" | sed "s#$HOME/##g")
  {
    _gitcmd "$1" "update-index -q --refresh"
    _gitcmd "$1" "diff-index --name-only HEAD --"
    _gitcmd "$1" "log --branches --not --remotes -n 1"
    _gitcmd "$1" "ls-files --others --exclude-standard --directory --no-empty-directory"
    _gitcmd "$1" "branch --show-current" | grep -E -v ' (master|main) \(branch\)$'
  } | sed "s#^#$BASE#g"
}

JSON=0
[ -n "$1" ] && [ "$1" = "json" ] && JSON=1
_text() {
  [ "$JSON" -eq 0 ] && return
  printf "\"text\": \"%s git\", \"class\": \"%s\"" "$1" "$2"
}

DETAILS=""
FOUND=0
[ "$JSON" -eq 1 ] && printf "{"
{
  for DIR in .ttypty workspace; do
    for SUB in $(ls "$HOME/$DIR"); do
      REPO="$HOME/$DIR/$SUB"
      [ ! -d "$REPO/.git" ] && continue
      SCAN=$(git -C "$REPO" config "status.scan" 2>/dev/null)
      [ -z "$SCAN" ] && SCAN="true"
      [ "$SCAN" != "true" ] && continue
      STATUS=$(_gitstatus "$REPO" | grep -v '^$' | sed ':a;N;$!ba;s/\n/\\n/g')
      [ -z "$STATUS" ] && continue
      [ "$FOUND" -eq 0 ] && _text "$GITDIRTY" "dirty" && FOUND=1
      [ -z "$DETAILS" ] && DETAILS="$STATUS" && continue
      DETAILS="${DETAILS}\\n$STATUS"
    done
  done
  if [ "$FOUND" -eq 0 ]; then
    _text "$GITCLEAN" ""
  else
    if [ "$JSON" -eq 0 ]; then
      echo "$DETAILS" | sed 's/\\n/\n/g'
    else
      printf ", \"tooltip\": \"%s\"" "$DETAILS"
    fi
  fi
} 2>/dev/null
[ "$JSON" -eq 1 ] && printf "}"
