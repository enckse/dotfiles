#!/bin/sh -e
HASH=""
FILE=""
URL=""
PROJECTS=""
PAYLOAD=""
LOCAL_PROJECT=0
while getopts "d:f:u:h:t:p:n:l" opt ; do
  case $opt in
    f) FILE="$OPTARG";;
    u) URL="$OPTARG";;
    h) HASH="$OPTARG";;
    p) PROJECTS="$OPTARG $PROJECTS";;
    l) LOCAL_PROJECT=1;;
    d) PAYLOAD="$OPTARG";;
    *)
      echo "unknown arg $opt"
      exit 1
      ;;
  esac
done

[ -z "$URL" ] && echo "url required" && exit 1
[ -z "$FILE" ] && echo "file required" && exit 1
[ -z "$HASH" ] && echo "hash required" && exit 1

if [ -z "$PAYLOAD" ]; then
  case "$FILE" in
    *.tar*)
        PAYLOAD="compressed data"
        ;;
      *.zip)
        PAYLOAD="Zip archive data"
        ;;
  esac
  [ -z "$PAYLOAD" ] && echo "data payload type required" && exit 1
fi

NEEDS=1
if [ -e "$FILE" ]; then
  if file "$FILE" | grep -q "$PAYLOAD"; then
    NEEDS=0
  fi
fi
if [ "$NEEDS" -eq 1 ]; then
  echo "downloading: $URL"
  if echo "$URL" | grep -q '^rsync://'; then
    rsync -avc "$(echo "$URL" | cut -d ":" -f 2- | sed 's#^//##g')" "$FILE"
  else
    curl --silent -L "$URL" > "$FILE"
  fi
fi

CURHASH=$(sha256sum "$FILE" | cut -c 1-7)
[ "$CURHASH" != "$HASH" ] && echo "hash mismatch (input: $HASH, calculated: $CURHASH)" && exit 1

if [ -n "$PKGS_LIST" ] && [ $LOCAL_PROJECT -eq 0 ]; then
  if [ -z "$PROJECTS" ]; then
    if echo "$URL" | grep -q "https://"; then
      PROJECTS="$(echo "$URL" | cut -d "/" -f 1-5)"
    fi
  fi
  for PROJECT in $PROJECTS; do
    [ -z "$PROJECT" ] && echo "unable to read project/unset?" && exit 1
    echo "'$PROJECT'" | sed 's/^/check_version /g' >> "$PKGS_LIST"
  done
fi

exit 0
