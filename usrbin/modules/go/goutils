#!/bin/sh -e
GOTOOLS="
git.sr.ht/~enckse/git-tools/cmd/...
git.sr.ht/~enckse/lockbox/cmd/lb
github.com/mgechev/revive 
golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment
golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize
honnef.co/go/tools/cmd/staticcheck
mvdan.cc/gofumpt
golang.org/x/tools/gopls
github.com/restic/restic/cmd/restic
"

! command -v go >/dev/null && echo "no go package found" && exit 1

VERSION=0.1.0
TO="$PKGS_ROOT/go-utils/$VERSION"
[ ! -d "$TO" ] && mkdir -p "$TO"
UTIL_ENV="$TO/.usrbin"
[ ! -e "$UTIL_ENV" ] && (echo "export PATH=\"$TO/:\$PATH\"" > "$UTIL_ENV")

GOMODS="$TO/go-mod-updates"
if [ ! -x "$GOMODS" ]; then
  {
    echo "#!/bin/sh -e"
    echo "[ ! -e 'go.mod' ] && echo 'cowardly failing to run go mod commands' && exit 1"
    echo "go get -u ./..."
    echo "go mod tidy"
  } > "$GOMODS"
  chmod 755 "$GOMODS"
fi

_pkgv() {
  echo "check_version 'https://$1'" >> "$PKGS_LIST"
}

GOLINT="$TO/go-lint"
_golint() {
  [ -x "$GOLINT" ] && return
  NAMED="$(basename "$1")"
  ARGS="$2"
  FILES="$3"
  [ -z "$FILES" ] && FILES="./..."
  echo "$NAMED $ARGS $FILES" >> "$GOLINT"
}

if [ ! -x "$GOLINT" ]; then
  {
    echo "#!/bin/sh -e"
    echo "[ ! -e 'go.mod' ] && echo 'cowardly failing to run go lint commands' && exit 1"
    echo "go vet ./..."
  } > "$GOLINT"
fi

for f in $GOTOOLS; do
  versioning=""
  name=$(echo "$f" | rev | cut -d '/' -f 1 | rev)
  case "$f" in
    git.sr.ht/* | github.com/*)
      _pkgv "$(echo "$f" | cut -d "/" -f 1,2,3)"
      case "$f" in
        *enckse/git-tools*)
          versioning="v0.3.1"
          name="git-tools"
          ;;
        *enckse/lockbox*)
          versioning="v1.4.5"
          ;;
        *mgechev/revive*)
          versioning="v1.9.0"
          _golint "$f"
          ;;
        *restic/restic*)
          versioning="v0.18.0"
          ;;
      esac
      ;; 
    */fieldalignment)
      versioning=v0.33.0
      _golint "$f"
      ;;
    */cmd/staticcheck)
      _pkgv "github.com/dominikh/go-tools"
      versioning="v0.6.1"
      _golint "$f" "-checks all -debug.run-quickfix-analyzers"
      ;;
    */modernize | */tools/gopls)
      _pkgv "github.com/golang/tools"
      versioning="v0.18.1"
      case "$f" in
        */modernize)
          _golint "$f" "-test"
          ;;
      esac
      ;;
    */gofumpt)
      _pkgv "github.com/mvdan/gofumpt"
      _golint "$f" "-d -extra" '$(find . -type f -name "*.go" | tr "\\n" " ")'
      versioning="v0.8.0"
      ;;
    *)
      echo "unable to package version: $f" >&2
      exit 1
      ;;
  esac
  [ -z "$versioning" ] && echo "no version set: $f" && exit 1
  TO="$PKGS_ROOT/$name/$versioning"
  ENV="$TO/.usrbin"
  [ -e "$ENV" ] && continue
  mkdir -p "$TO"
  (cd "$TO" && GOBIN="$PWD" go install "$f@$versioning")
  (cd "$TO" && echo "export PATH=\"$TO/:\$PATH\"" > "$ENV")
  [ "$name" = "lb" ] && \
    (cd "$TO" && SHELL="$USE_SHELL" ./lb completions > "lb.$USE_SHELL") && \
    (cd "$TO" && echo "export USRBIN_COMP=\"$TO/lb.$USE_SHELL:\$USRBIN_COMP\"" >> "$ENV")
done
[ ! -x "$GOLINT" ] && chmod 755 "$GOLINT"
exit 0
